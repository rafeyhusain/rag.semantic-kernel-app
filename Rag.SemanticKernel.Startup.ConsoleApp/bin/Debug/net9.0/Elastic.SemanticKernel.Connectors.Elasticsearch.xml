<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elastic.SemanticKernel.Connectors.Elasticsearch</name>
    </assembly>
    <members>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchDataModelMapper`1">
            <summary>
                A mapper that maps between the generic Semantic Kernel data model and the model that the data is stored under,
                within Elasticsearch.
            </summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchDataModelMapper`1._elasticsearchClientSettings">
            <summary>The Elasticsearch client settings.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchDataModelMapper`1._propertyToStorageName">
            <summary>A mapping from <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" /> to storage model property name.</summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchDataModelMapper`1.#ctor(System.Collections.Generic.Dictionary{Microsoft.Extensions.VectorData.VectorStoreRecordProperty,System.String},Elastic.Clients.Elasticsearch.IElasticsearchClientSettings)">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper" /> class.
            </summary>
            <param name="propertyToStorageName">A mapping from <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" /> to storage model property name.</param>
            <param name="elasticsearchClientSettings">The Elasticsearch client settings to use.</param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchDataModelMapper`1.MapFromDataToStorageModel(`0)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchDataModelMapper`1.MapFromStorageToDataModel(System.ValueTuple{System.String,System.Text.Json.Nodes.JsonObject},Microsoft.Extensions.VectorData.StorageToDataModelMapperOptions)">
            <inheritdoc />
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper">
            <summary>
                A mapper that maps between the generic Semantic Kernel data model and the model that the data is stored under,
                within Elasticsearch.
            </summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper._elasticsearchClientSettings">
            <summary>The Elasticsearch client settings.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper._propertyToStorageName">
            <summary>A mapping from <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" /> to storage model property name.</summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper.#ctor(System.Collections.Generic.Dictionary{Microsoft.Extensions.VectorData.VectorStoreRecordProperty,System.String},Elastic.Clients.Elasticsearch.IElasticsearchClientSettings)">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper" /> class.
            </summary>
            <param name="propertyToStorageName">A mapping from <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" /> to storage model property name.</param>
            <param name="elasticsearchClientSettings">The Elasticsearch client settings to use.</param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper.MapFromDataToStorageModel(Microsoft.Extensions.VectorData.VectorStoreGenericDataModel{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchGenericDataModelMapper.MapFromStorageToDataModel(System.ValueTuple{System.String,System.Text.Json.Nodes.JsonObject},Microsoft.Extensions.VectorData.StorageToDataModelMapperOptions)">
            <inheritdoc />
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore">
            <summary>
                Class for accessing the list of collections in a Elasticsearch vector store.
            </summary>
            <remarks>
                This class can be used with collections of any schema type, but requires you to provide schema information when
                getting a collection.
            </remarks>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore.DatabaseName">
            <summary>The name of this database for telemetry purposes.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore._elasticsearchClient">
            <summary>Elasticsearch client that can be used to manage the collections and points in an Elasticsearch store.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore._options">
            <summary>Optional configuration options for this class.</summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore.#ctor(Elastic.Clients.Elasticsearch.ElasticsearchClient,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore" /> class.
            </summary>
            <param name="elasticsearchClient">
                Elasticsearch client that can be used to manage the collections and points in an
                Elasticsearch store.
            </param>
            <param name="options">Optional configuration options for this class.</param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore.#ctor(Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore" /> class.
            </summary>
            <param name="elasticsearchClient">
                Elasticsearch client that can be used to manage the collections and points in an
                Elasticsearch store.
            </param>
            <param name="options">Optional configuration options for this class.</param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore.GetCollection``2(System.String,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStore.ListCollectionNamesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionCreateMapping">
            <summary>
            Contains mapping helpers to use when creating an Elasticsearch vector collection.
            </summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionCreateMapping.BuildPropertyMappings(Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader,System.Collections.Generic.Dictionary{Microsoft.Extensions.VectorData.VectorStoreRecordProperty,System.String})">
            <summary>
            TBC
            </summary>
            <param name="propertyReader"></param>
            <param name="propertyToStorageName"></param>
            <returns></returns>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionCreateMapping.GetIndexKind(Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty)">
            <summary>
                Get the configured Elasticsearch index kind from the given <paramref name="vectorProperty" />.
                If none is configured, the default is <c>int8_hnsw</c>.
            </summary>
            <param name="vectorProperty">The vector property definition.</param>
            <returns>The chosen Elasticsearch index kind.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if an index kind is chosen that isn't supported by Elasticsearch.</exception>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionCreateMapping.GetSimilarityFunction(Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty)">
            <summary>
                Get the configured Elasticsearch distance function from the given <paramref name="vectorProperty" />.
                If none is configured, the default is <c>cosine</c>.
            </summary>
            <param name="vectorProperty">The vector property definition.</param>
            <returns>The chosen Elasticsearch distance function.</returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown if a distance function is chosen that isn't supported by
                Elasticsearch.
            </exception>
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionSearchMapping">
            <summary>
            Contains mapping helpers to use when searching for documents using Elasticsearch.
            </summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionSearchMapping.BuildFilter(Microsoft.Extensions.VectorData.VectorSearchFilter,System.Collections.Generic.Dictionary{Microsoft.Extensions.VectorData.VectorStoreRecordProperty,System.String})">
            <summary>
            Build a list of Elasticsearch filter <see cref="T:Elastic.Clients.Elasticsearch.QueryDsl.Query"/> from the provided <see cref="T:Microsoft.Extensions.VectorData.VectorSearchFilter"/>.
            </summary>
            <param name="basicVectorSearchFilter">The <see cref="T:Microsoft.Extensions.VectorData.VectorSearchFilter"/> to build the Elasticsearch filter queries from.</param>
            <param name="propertyToStorageName">A mapping from <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" /> to storage model property name.</param>
            <returns>The Elasticsearch filter queries.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the provided filter contains unsupported types, values or unknown properties.</exception>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreCollectionSearchMapping.FieldValueFromValue(System.Object)">
            <summary>
            TODO: TBC
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions">
            <summary>
                Options when creating a <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions" />.
            </summary>
        </member>
        <member name="P:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions.VectorStoreCollectionFactory">
            <summary>
                An optional factory to use for constructing <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1" />
                instances, if a custom record collection is required.
            </summary>
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1">
            <summary>
                Service for storing and retrieving vector records, that uses Elasticsearch as the underlying storage.
            </summary>
            <typeparam name="TRecord">The data model to use for adding, updating and retrieving data from storage.</typeparam>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.DatabaseName">
            <summary>The name of this database for telemetry purposes.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.SupportedKeyTypes">
            <summary>A set of types that a key on the provided model may have.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.DefaultVectorSearchOptions">
            <summary>The default options for vector search.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1._elasticsearchClient">
            <summary>Elasticsearch client that can be used to manage the collections and points in an Elasticsearch store.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1._options">
            <summary>Optional configuration options for this class.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1._propertyReader">
            <summary>A helper to access property information for the current data model and record definition.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1._propertyToStorageName">
            <summary>A mapping from <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" /> to storage model property name.</summary>
        </member>
        <member name="F:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1._mapper">
            <summary>TODO: TBC</summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.#ctor(Elastic.Clients.Elasticsearch.ElasticsearchClient,System.String,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1" /> class.
            </summary>
            <param name="elasticsearchClient">
                Elasticsearch client that can be used to manage the collections and points in an
                Elasticsearch store.
            </param>
            <param name="collectionName">
                The name of the collection that this
                <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1" /> will access.
            </param>
            <param name="options">Optional configuration options for this class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="elasticsearchClient" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown for any misconfigured options.</exception>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.#ctor(Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient,System.String,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1" /> class.
            </summary>
            <param name="elasticsearchClient">
                Elasticsearch client that can be used to manage the collections and points in an
                Elasticsearch store.
            </param>
            <param name="collectionName">
                The name of the collection that this
                <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1" /> will access.
            </param>
            <param name="options">Optional configuration options for this class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="elasticsearchClient" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown for any misconfigured options.</exception>
        </member>
        <member name="P:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.CollectionName">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.CollectionExistsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.CreateCollectionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.CreateCollectionIfNotExistsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.DeleteCollectionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.GetAsync(System.String,Microsoft.Extensions.VectorData.GetRecordOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.GetBatchAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.VectorData.GetRecordOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.DeleteAsync(System.String,Microsoft.Extensions.VectorData.DeleteRecordOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.DeleteBatchAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.VectorData.DeleteRecordOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.UpsertAsync(`0,Microsoft.Extensions.VectorData.UpsertRecordOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.UpsertBatchAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.VectorData.UpsertRecordOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.RunOperationAsync(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
                Run the given operation and wrap any <see cref="T:Elastic.Transport.TransportException" /> with
                <see cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException" />."/>
            </summary>
            <param name="operationName">The type of database operation being run.</param>
            <param name="operation">The operation to run.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollection`1.RunOperationAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Run the given operation and wrap any <see cref="T:Elastic.Transport.TransportException" /> with
                <see cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException" />."/>
            </summary>
            <typeparam name="T">The response type of the operation.</typeparam>
            <param name="operationName">The type of database operation being run.</param>
            <param name="operation">The operation to run.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions`1">
            <summary>
                Options when creating a <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions`1" />.
            </summary>
        </member>
        <member name="P:Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions`1.VectorStoreRecordDefinition">
            <summary>
                Gets or sets an optional record definition that defines the schema of the record type.
            </summary>
            <remarks>
                If not provided, the schema will be inferred from the record model class using reflection.
                In this case, the record model properties must be annotated with the appropriate attributes to indicate their
                usage.
                See <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyAttribute" />, <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDataAttribute" /> and
                <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorAttribute" />.
            </remarks>
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.IElasticsearchVectorStoreRecordCollectionFactory">
            <summary>
                Interface for constructing <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2" /> Elasticsearch instances when
                using <see cref="T:Microsoft.Extensions.VectorData.IVectorStore" /> to retrieve these.
            </summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.IElasticsearchVectorStoreRecordCollectionFactory.CreateVectorStoreRecordCollection``2(Elastic.Clients.Elasticsearch.ElasticsearchClient,System.String,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition)">
            <summary>
                Constructs a new instance of the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2" />.
            </summary>
            <typeparam name="TKey">The data type of the record key.</typeparam>
            <typeparam name="TRecord">The data model to use for adding, updating and retrieving data from storage.</typeparam>
            <param name="elasticsearchClient">
                Elasticsearch client that can be used to manage the collections and points in an
                Elasticsearch store.
            </param>
            <param name="name">The name of the collection to connect to.</param>
            <param name="vectorStoreRecordDefinition">
                An optional record definition that defines the schema of the record type. If
                not present, attributes on <typeparamref name="TRecord" /> will be used.
            </param>
            <returns>The new instance of <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2" />.</returns>
        </member>
        <member name="T:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient">
            <summary>
                Decorator class for <see cref="P:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.ElasticsearchClient" /> that exposes the required methods as virtual allowing
                for mocking in unit tests.
            </summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.#ctor(Elastic.Clients.Elasticsearch.ElasticsearchClient)">
            <summary>
                Initializes a new instance of the <see cref="T:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient" /> class.
            </summary>
            <param name="elasticsearchClient">
                Elasticsearch client that can be used to manage the collections and points in an
                Elasticsearch store.
            </param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.#ctor">
            <summary>
                Constructor for mocking purposes only.
            </summary>
        </member>
        <member name="P:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.ElasticsearchClient">
            <summary>
                Gets the internal <see cref="P:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.ElasticsearchClient" /> that this mockable instance wraps.
            </summary>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.ListIndicesAsync(System.Threading.CancellationToken)">
            <summary>
                Gets the names of all existing indices.
            </summary>
            <param name="cancellationToken">
                The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.IndexExistsAsync(Elastic.Clients.Elasticsearch.IndexName,System.Threading.CancellationToken)">
            <summary>
                Check if an index exists.
            </summary>
            <param name="indexName">The name of the index.</param>
            <param name="cancellationToken">
                The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.CreateIndexAsync(Elastic.Clients.Elasticsearch.IndexName,Elastic.Clients.Elasticsearch.Mapping.Properties,System.Threading.CancellationToken)">
            <summary>
                Creates an index and configures the required mappings.
            </summary>
            <param name="indexName">The name of the index.</param>
            <param name="properties">The property mappings.</param>
            <param name="cancellationToken">
                The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.DeleteIndexAsync(Elastic.Clients.Elasticsearch.IndexName,System.Threading.CancellationToken)">
            <summary>
                Drop an index and all its associated data.
            </summary>
            <param name="indexName">The name of the index.</param>
            <param name="cancellationToken">
                The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.IndexDocumentAsync``1(Elastic.Clients.Elasticsearch.IndexName,Elastic.Clients.Elasticsearch.Id,``0,System.Threading.CancellationToken)">
            <summary>
                TODO: TBC
            </summary>
            <typeparam name="TDocument"></typeparam>
            <param name="indexName"></param>
            <param name="id"></param>
            <param name="document"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Elastic.Transport.TransportException"></exception>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.DeleteDocumentAsync(Elastic.Clients.Elasticsearch.IndexName,Elastic.Clients.Elasticsearch.Id,System.Threading.CancellationToken)">
            <summary>
            TODO: TBC
            </summary>
            <param name="indexName"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Elastic.Transport.TransportException"></exception>
        </member>
        <member name="M:Elastic.SemanticKernel.Connectors.Elasticsearch.MockableElasticsearchClient.SearchAsync(Elastic.Clients.Elasticsearch.IndexName,Elastic.Clients.Elasticsearch.QueryDsl.Query,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            TODO: TBC
            </summary>
            <param name="indexName"></param>
            <param name="query"></param>
            <param name="from"></param>
            <param name="size"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Elastic.Transport.TransportException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.ElasticsearchKernelBuilderExtensions">
            <summary>
            Extension methods to register Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> instances on the <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchKernelBuilderExtensions.AddElasticsearchVectorStore(Microsoft.SemanticKernel.IKernelBuilder,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions,System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> with the specified service ID and where <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is retrieved from the dependency injection container.
            </summary>
            <param name="builder">The builder to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> on.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>The kernel builder.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchKernelBuilderExtensions.AddElasticsearchVectorStore(Microsoft.SemanticKernel.IKernelBuilder,Elastic.Clients.Elasticsearch.IElasticsearchClientSettings,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions,System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> with the specified service ID and where <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is constructed using the provided client settings.
            </summary>
            <param name="builder">The builder to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> on.</param>
            <param name="clientSettings">The Elasticsearch client settings.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>The kernel builder.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchKernelBuilderExtensions.AddElasticsearchVectorStoreRecordCollection``2(Microsoft.SemanticKernel.IKernelBuilder,System.String,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions{``1},System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> and <see cref="T:Microsoft.Extensions.VectorData.IVectorizedSearch`1"/> with the specified service ID
            and where the <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is retrieved from the dependency injection container.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <param name="builder">The builder to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> on.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>The kernel builder.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchKernelBuilderExtensions.AddElasticsearchVectorStoreRecordCollection``2(Microsoft.SemanticKernel.IKernelBuilder,System.String,Elastic.Clients.Elasticsearch.IElasticsearchClientSettings,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions{``1},System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> and <see cref="T:Microsoft.Extensions.VectorData.IVectorizedSearch`1"/> with the specified service ID
            and where the <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is constructed using the provided client settings.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <param name="builder">The builder to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> on.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="clientSettings">The Elasticsearch client settings.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>The kernel builder.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ElasticsearchServiceCollectionExtensions">
            <summary>
            Extension methods to register Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> instances on an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchServiceCollectionExtensions.AddElasticsearchVectorStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions,System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> with the specified service ID and where <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is retrieved from the dependency injection container.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> on.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchServiceCollectionExtensions.AddElasticsearchVectorStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,Elastic.Clients.Elasticsearch.IElasticsearchClientSettings,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreOptions,System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> with the specified service ID and where <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is constructed using the provided client settings.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/> on.</param>
            <param name="clientSettings">The Elasticsearch client settings.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchServiceCollectionExtensions.AddElasticsearchVectorStoreRecordCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions{``1},System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> and <see cref="T:Microsoft.Extensions.VectorData.IVectorizedSearch`1"/> with the specified service ID
            and where the <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is retrieved from the dependency injection container.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> on.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>Service collection.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchServiceCollectionExtensions.AddElasticsearchVectorStoreRecordCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Elastic.Clients.Elasticsearch.IElasticsearchClientSettings,Elastic.SemanticKernel.Connectors.Elasticsearch.ElasticsearchVectorStoreRecordCollectionOptions{``1},System.String)">
            <summary>
            Register an Elasticsearch <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> and <see cref="T:Microsoft.Extensions.VectorData.IVectorizedSearch`1"/> with the specified service ID
            and where the <see cref="T:Elastic.Clients.Elasticsearch.ElasticsearchClient"/> is constructed using the provided client settings.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> on.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="clientSettings">The Elasticsearch client settings.</param>
            <param name="options">Optional options to further configure the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/>.</param>
            <param name="serviceId">An optional service id to use as the service key.</param>
            <returns>Service collection.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.ElasticsearchServiceCollectionExtensions.AddVectorizedSearch``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Also register the <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2"/> with the given <paramref name="serviceId"/> as a <see cref="T:Microsoft.Extensions.VectorData.IVectorizedSearch`1"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TRecord">The type of the data model that the collection should contain.</typeparam>
            <param name="services">The service collection to register on.</param>
            <param name="serviceId">The service id that the registrations should use.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.AsciiLettersDigitsUnderscoresRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.FilenameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[^.]+\\.[^.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character other than '.' atomically at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character other than '.' greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.VectorStoreErrorHandler">
            <summary>
            Contains helpers for reading vector store model properties and their attributes.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreErrorHandler.RunModelConversion``1(System.String,System.String,System.String,System.Func{``0})">
            <summary>
            Run the given model conversion and wrap any exceptions with <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordMappingException"/>.
            </summary>
            <typeparam name="T">The response type of the operation.</typeparam>
            <param name="databaseSystemName">The name of the database system the operation is being run on.</param>
            <param name="collectionName">The name of the collection the operation is being run on.</param>
            <param name="operationName">The type of database operation being run.</param>
            <param name="operation">The operation to run.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.VectorStoreRecordMapping">
            <summary>
            Contains helper methods to map between storage and data models.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordMapping.SetValuesOnProperties``2(``1,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,``0},System.Func{``0,System.Type,System.Object})">
            <summary>
            Loop through the list of <see cref="T:System.Reflection.PropertyInfo"/> objects and for each one look up the storage name
            in the <paramref name="dataModelPropertiesInfo"/> and check if the value exists in the <paramref name="storageValues"/>.
            If so, set the value on the record object.
            </summary>
            <typeparam name="TStorageType">The type of the storage properties.</typeparam>
            <typeparam name="TRecord">The type of the target object.</typeparam>
            <param name="record">The target object to set the property values on.</param>
            <param name="dataModelPropertiesInfo"><see cref="T:System.Reflection.PropertyInfo"/> objects listing the properties on the data model to get values for.</param>
            <param name="dataModelToStorageNameMapping">Storage property names keyed by data property names.</param>
            <param name="storageValues">A dictionary of storage values by storage property name.</param>
            <param name="storageValueConverter">An optional function to convert the storage property values to data property values.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordMapping.BuildPropertiesInfoWithValues``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,``0},System.Func{``0,System.Type,System.Object})">
            <summary>
            Build a list of properties with their values from the given data model properties and storage values.
            </summary>
            <typeparam name="TStorageType">The type of the storage properties.</typeparam>
            <param name="dataModelPropertiesInfo"><see cref="T:System.Reflection.PropertyInfo"/> objects listing the properties on the data model to get values for.</param>
            <param name="dataModelToStorageNameMapping">Storage property names keyed by data property names.</param>
            <param name="storageValues">A dictionary of storage values by storage property name.</param>
            <param name="storageValueConverter">An optional function to convert the storage property values to data property values.</param>
            <returns>The list of data property objects and their values.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordMapping.SetPropertiesOnRecord``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,System.Object}})">
            <summary>
            Set the given list of properties with their values on the given object.
            </summary>
            <typeparam name="TRecord">The type of the target object.</typeparam>
            <param name="record">The target object to set the property values on.</param>
            <param name="propertiesInfoWithValues">A list of properties and their values to set.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordMapping.CreateEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Type)">
            <summary>
            Create an enumerable of the required type from the input enumerable.
            </summary>
            <typeparam name="T">The type of elements in the input enumerable.</typeparam>
            <param name="input">The input enumerable to convert.</param>
            <param name="requiredEnumerable">The type to convert to.</param>
            <returns>The new enumerable in the required type.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when a target type is requested that is not supported.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader">
            <summary>
            Contains helpers for reading vector store model properties and their attributes.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._dataModelType">
            <summary>The <see cref="T:System.Type"/> of the data model.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._vectorStoreRecordDefinition">
            <summary>A definition of the current storage model.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._options">
            <summary>Options for configuring the behavior of this class.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._keyProperties">
            <summary>The key properties from the definition.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._dataProperties">
            <summary>The data properties from the definition.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._vectorProperties">
            <summary>The vector properties from the definition.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._parameterlessConstructorInfo">
            <summary>The <see cref="T:System.Reflection.ConstructorInfo"/> of the parameterless constructor from the data model if one exists.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._keyPropertiesInfo">
            <summary>The key <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._dataPropertiesInfo">
            <summary>The data <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._vectorPropertiesInfo">
            <summary>The vector <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._storagePropertyNamesMap">
            <summary>A lazy initialized map of data model property names to the names under which they are stored in the data store.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._keyPropertyStoragePropertyNames">
            <summary>A lazy initialized list of storage names of key properties.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._dataPropertyStoragePropertyNames">
            <summary>A lazy initialized list of storage names of data properties.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._vectorPropertyStoragePropertyNames">
            <summary>A lazy initialized list of storage names of vector properties.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._jsonPropertyNamesMap">
            <summary>A lazy initialized map of data model property names to the names they will have if serialized to JSON.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._keyPropertyJsonNames">
            <summary>A lazy initialized list of json names of key properties.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._dataPropertyJsonNames">
            <summary>A lazy initialized list of json names of data properties.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader._vectorPropertyJsonNames">
            <summary>A lazy initialized list of json names of vector properties.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.RecordDefinition">
            <summary>Gets the record definition of the current storage model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.Properties">
            <summary>Gets the list of properties from the record definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyProperty">
            <summary>Gets the first <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty"/> object from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyProperties">
            <summary>Gets all <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.DataProperties">
            <summary>Gets all <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDataProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VectorProperty">
            <summary>Gets the first <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VectorProperties">
            <summary>Gets all <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty"/> objects from the record definition that was provided or that was generated from the data model.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.ParameterLessConstructorInfo">
            <summary>Gets the parameterless constructor if one exists, throws otherwise.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertyInfo">
            <summary>Gets the first key property info object.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertiesInfo">
            <summary>Gets the key property info objects.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.DataPropertiesInfo">
            <summary>Gets the data property info objects.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VectorPropertiesInfo">
            <summary>Gets the vector property info objects.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.FirstVectorPropertyName">
            <summary>Gets the name of the first vector property in the definition or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.FirstVectorPropertyInfo">
            <summary>Gets the first vector PropertyInfo object in the data model or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertyName">
            <summary>Gets the property name of the first key property in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertyStoragePropertyName">
            <summary>Gets the storage name of the first key property in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.StoragePropertyNamesMap">
            <summary>Gets the storage names of all the properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertyStoragePropertyNames">
            <summary>Gets the storage names of the key properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.DataPropertyStoragePropertyNames">
            <summary>Gets the storage names of the data properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.FirstVectorPropertyStoragePropertyName">
            <summary>Gets the storage name of the first vector property in the definition or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VectorPropertyStoragePropertyNames">
            <summary>Gets the storage names of the vector properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertyJsonName">
            <summary>Gets the json name of the first key property in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.KeyPropertyJsonNames">
            <summary>Gets the json names of the key properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.DataPropertyJsonNames">
            <summary>Gets the json names of the data properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.FirstVectorPropertyJsonName">
            <summary>Gets the json name of the first vector property in the definition or null if there are no vectors.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VectorPropertyJsonNames">
            <summary>Gets the json names of the vector properties in the definition.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.JsonPropertyNamesMap">
            <summary>A map of data model property names to the names they will have if serialized to JSON.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VerifyHasParameterlessConstructor">
            <summary>Verify that the data model has a parameterless constructor.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VerifyKeyProperties(System.Collections.Generic.HashSet{System.Type})">
            <summary>Verify that the types of the key properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VerifyDataProperties(System.Collections.Generic.HashSet{System.Type},System.Boolean)">
            <summary>Verify that the types of the data properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
            <param name="supportEnumerable">A value indicating whether enumerable types are supported where the element type is one of the supported types.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VerifyDataProperties(System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>Verify that the types of the data properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
            <param name="supportedEnumerableElementTypes">A value indicating whether enumerable types are supported where the element type is one of the supported types.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.VerifyVectorProperties(System.Collections.Generic.HashSet{System.Type})">
            <summary>Verify that the types of the vector properties fall within the provided set.</summary>
            <param name="supportedTypes">The list of supported types.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.GetStoragePropertyName(System.String)">
            <summary>
            Get the storage property name for the given data model property name.
            </summary>
            <param name="dataModelPropertyName">The data model property name for which to get the storage property name.</param>
            <returns>The storage property name.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.GetJsonPropertyName(System.String)">
            <summary>
            Get the name under which a property will be stored if serialized to JSON
            </summary>
            <param name="dataModelPropertyName">The data model property name for which to get the JSON name.</param>
            <returns>The JSON name.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.LoadPropertyInfoIfNeeded">
            <summary>
            Check if we have previously loaded the <see cref="T:System.Reflection.PropertyInfo"/> objects from the data model and if not, load them.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.SplitDefinitionAndVerify(System.String,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Split the given <paramref name="definition"/> into key, data and vector properties and verify that we have the expected numbers of each type.
            </summary>
            <param name="typeName">The name of the type that the definition relates to.</param>
            <param name="definition">The <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> to split.</param>
            <param name="supportsMultipleKeys">A value indicating whether multiple key properties are supported.</param>
            <param name="supportsMultipleVectors">A value indicating whether multiple vectors are supported.</param>
            <param name="requiresAtLeastOneVector">A value indicating whether we need at least one vector.</param>
            <returns>The properties on the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> split into key, data and vector groupings.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there are any validation failures with the provided <paramref name="definition"/>.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.FindPropertiesInfo(System.Type)">
            <summary>
            Find the properties with <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyAttribute"/>, <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDataAttribute"/> and <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorAttribute"/> attributes
            and verify that they exist and that we have the expected numbers of each type.
            Return those properties in separate categories.
            </summary>
            <param name="type">The data model to find the properties on.</param>
            <returns>The categorized properties.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.FindPropertiesInfo(System.Type,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition)">
            <summary>
            Find the properties listed in the <paramref name="vectorStoreRecordDefinition"/> on the <paramref name="type"/> and verify
            that they exist.
            Return those properties in separate categories.
            </summary>
            <param name="type">The data model to find the properties on.</param>
            <param name="vectorStoreRecordDefinition">The property configuration.</param>
            <returns>The categorized properties.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.CreateVectorStoreRecordDefinitionFromType(System.ValueTuple{System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Reflection.PropertyInfo}})">
            <summary>
            Create a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> by reading the attributes on the provided <see cref="T:System.Reflection.PropertyInfo"/> objects.
            </summary>
            <param name="propertiesInfo"><see cref="T:System.Reflection.PropertyInfo"/> objects to build a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> from.</param>
            <returns>The <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> based on the given <see cref="T:System.Reflection.PropertyInfo"/> objects.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.BuildPropertyNameToStorageNameMap(System.ValueTuple{System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordDataProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty}})">
            <summary>
            Build a map of property names to the names under which they should be saved in storage, for the given properties.
            </summary>
            <param name="properties">The properties to build the map for.</param>
            <returns>The map from property names to the names under which they should be saved in storage.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.BuildPropertyNameToJsonPropertyNameMap(System.ValueTuple{System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordKeyProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordDataProperty},System.Collections.Generic.List{Microsoft.Extensions.VectorData.VectorStoreRecordVectorProperty}},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Build a map of property names to the names that they would have if serialized to JSON.
            </summary>
            <param name="properties">The properties to build the map for.</param>
            <param name="dataModel">The data model type that the property belongs to.</param>
            <param name="options">The options used for JSON serialization.</param>
            <returns>The map from property names to the names that they would have if serialized to JSON.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader.GetJsonPropertyName(Microsoft.Extensions.VectorData.VectorStoreRecordProperty,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Get the JSON property name of a property by using the <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> if available, otherwise
            using the <see cref="T:System.Text.Json.JsonNamingPolicy"/> if available, otherwise falling back to the property name.
            The provided <paramref name="dataModel"/> may not actually contain the property, e.g. when the user has a data model that
            doesn't resemble the stored data and where they are using a custom mapper.
            </summary>
            <param name="property">The property to retrieve a JSON name for.</param>
            <param name="dataModel">The data model type that the property belongs to.</param>
            <param name="options">The options used for JSON serialization.</param>
            <returns>The JSON property name.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReaderOptions">
            <summary>
            Contains options for <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReader"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReaderOptions.SupportsMultipleKeys">
            <summary>
            Gets or sets a value indicating whether the connector/db supports multiple key properties.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReaderOptions.SupportsMultipleVectors">
            <summary>
            Gets or sets a value indicating whether the connector/db supports multiple vector properties.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReaderOptions.RequiresAtLeastOneVector">
            <summary>
            Gets or sets a value indicating whether the connector/db requires at least one vector property.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.VectorStoreRecordPropertyReaderOptions.JsonSerializerOptions">
            <summary>
            Gets or sets the json serializer options that the connector might be using for storage serialization.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification">
            <summary>
            Contains helpers for verifying the types of vector store record properties.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.HashSet{System.Type},System.String,System.Nullable{System.Boolean})">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <param name="supportEnumerable">A value indicating whether <see cref="T:System.Collections.Generic.IEnumerable`1"/> versions of all the types should also be supported.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type},System.String)">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="supportedEnumerableElementTypes">A set of supported types that the provided enumerable properties may use as their element type.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.IEnumerable{Microsoft.Extensions.VectorData.VectorStoreRecordProperty},System.Collections.Generic.HashSet{System.Type},System.String,System.Nullable{System.Boolean})">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <param name="supportEnumerable">A value indicating whether <see cref="T:System.Collections.Generic.IEnumerable`1"/> versions of all the types should also be supported.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyTypes(System.Collections.Generic.IEnumerable{Microsoft.Extensions.VectorData.VectorStoreRecordProperty},System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type},System.String)">
            <summary>
            Verify that the given properties are of the supported types.
            </summary>
            <param name="properties">The properties to check.</param>
            <param name="supportedTypes">A set of supported types that the provided properties may have.</param>
            <param name="supportedEnumerableElementTypes">A set of supported types that the provided enumerable properties may use as their element type.</param>
            <param name="propertyCategoryDescription">A description of the category of properties being checked. Used for error messaging.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the properties are not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyPropertyType(System.String,System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type},System.String)">
            <summary>
            Verify that the given property is of the supported types.
            </summary>
            <param name="propertyName">The name of the property being checked. Used for error messaging.</param>
            <param name="propertyType">The type of the property being checked.</param>
            <param name="supportedTypes">A set of supported types that the provided property may have.</param>
            <param name="supportedEnumerableElementTypes">A set of supported types that the provided property may use as its element type if it's enumerable.</param>
            <param name="propertyCategoryDescription">A description of the category of property being checked. Used for error messaging.</param>
            <exception cref="T:System.ArgumentException">Thrown if the property is not in the given set of types.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.IsSupportedEnumerableType(System.Type)">
            <summary>
            Verify if the provided type is one of the supported Enumerable types.
            </summary>
            <param name="type">The type to check.</param>
            <returns><see langword="true"/> if the type is a supported Enumerable, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.GetCollectionElementType(System.Type)">
            <summary>
            Returns <see cref="T:System.Type"/> of collection elements.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyGenericDataModelKeyType(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Checks that if the provided <paramref name="recordType"/> is a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/> that the key type is supported by the default mappers.
            If not supported, a custom mapper must be supplied, otherwise an exception is thrown.
            </summary>
            <param name="recordType">The type of the record data model used by the connector.</param>
            <param name="customMapperSupplied">A value indicating whether a custom mapper was supplied to the connector</param>
            <param name="allowedKeyTypes">The list of key types supported by the default mappers.</param>
            <exception cref="T:System.ArgumentException">Thrown if the key type of the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/> is not supported by the default mappers and a custom mapper was not supplied.</exception>
        </member>
        <member name="M:Microsoft.Extensions.VectorData.VectorStoreRecordPropertyVerification.VerifyGenericDataModelDefinitionSupplied(System.Type,System.Boolean)">
            <summary>
            Checks that if the provided <paramref name="recordType"/> is a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/> that a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> is also provided.
            </summary>
            <param name="recordType">The type of the record data model used by the connector.</param>
            <param name="recordDefinitionSupplied">A value indicating whether a record definition was supplied to the connector.</param>
            <exception cref="T:System.ArgumentException">Thrown if a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDefinition"/> is not provided when using <see cref="T:Microsoft.Extensions.VectorData.VectorStoreGenericDataModel`1"/>.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AsciiLettersDigitsUnderscoresRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FilenameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FilenameRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiWordChars">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
